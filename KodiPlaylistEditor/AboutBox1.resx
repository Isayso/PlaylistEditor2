<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="donateButton.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        evJrv5T/BzZAZstaIDI1AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>F2 to edit cell
Ctrl + C copy row
Ctrl + V paste row
Ctrl + X cut row
Ctrl + I Insert row
Ctrl + F find string
Ctrl + N open new window
Ctrl + O open file dialog
Ctrl + S save
Ctrl + Z undo
Ctrl + G search with google
Ctrl + P send link to Kodi (IP in settings)
Ctrl + Q send link to Kodi queue
Ctrl + L open link in explorer or browser
Ctrl + +/- change font size
Ctrl + 1/2 move up/down line
del delete selected row

## Double Click Events
Double on Background --&gt; open file dialog
Double on Grid Cell --&gt; play in vlc
Double + Ctrl on Grid Cell --&gt; play on Kodi
Double + Ctrl + Shift --&gt; queue on Kodi</value>
  </data>
</root>